name: Run & Post

on:
  workflow_dispatch:
    inputs:
      api_levels:
        description: "Android API levels (comma-separated, e.g. 33,34)"
        type: string
        required: true
        default: "34"

concurrency:
  group: run-and-post-${{ github.ref }}
  cancel-in-progress: true

jobs:
  e2e:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    strategy:
      fail-fast: false
      matrix:
        api-level: ${{ split(github.event.inputs.api_levels, ',') }}
        arch: [x86_64]
        target: [google_apis]

    # In CI, we take the package from the repository (place the file under app/)
    env:
      LOCAL_APKM: app/tv.twitch.android.app_26.2.4-2602046_4arch_7dpi_9fc48eed4e73a766d49eb7f8c3737e53_apkmirror.com.apkm

    steps:
      # ✅ Checkout with LFS enabled, so the .apkm binary is downloaded (not just a pointer)
      - uses: actions/checkout@v4
        with:
          lfs: true

      # ✅ Enable KVM so the emulator can use hardware acceleration
      - name: Enable KVM perms (hard)
        run: |
          if [ -e /dev/kvm ]; then
            sudo chgrp kvm /dev/kvm || true
            sudo chmod 0666 /dev/kvm || true
            ls -l /dev/kvm
            groups
          else
            echo "No /dev/kvm found on this runner"
            ls -la /dev | grep kvm || true
          fi

      # Java / Gradle
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Gradle (with cache)
        uses: gradle/actions/setup-gradle@v4

      - name: (Optional) Assemble your app artifacts
        run: ./gradlew --no-daemon tasks || true

      # Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps
        run: |
          pip install -r requirements.txt
          python -V
          pip list

      # Appium
      - name: Setup Appium server
        run: |
          npm -g install appium@next appium-uiautomator2-driver
          appium driver install uiautomator2
          # Allow mobile: shell via Appium (only if you need it)
          nohup appium --base-path / --allow-insecure=adb_shell > appium.log 2>&1 &

      # Create a bash script (avoid /bin/sh parsing issues in the action)
      - name: Create boot_and_test.sh
        shell: bash
        run: |
          cat > /tmp/boot_and_test.sh <<'BASH'
          #!/usr/bin/env bash
          set -euo pipefail

          red()  { echo -e "\033[31m$*\033[0m"; }
          info() { echo "[INFO] $*"; }

          install_apk_or_bundle() {
            local path="$1"
            if [ ! -f "$path" ]; then
              red "Package not found at: $path"
              exit 1
            fi
            # If the file is zip-compatible it can be either a plain APK (zip) or a container (APKM/APKS/XAPK)
            if unzip -l "$path" >/dev/null 2>&1; then
              if unzip -l "$path" | grep -q "base.apk"; then
                info "Detected bundle container (APKM/APKS/XAPK). Extracting…"
                rm -rf /tmp/apkparts && mkdir -p /tmp/apkparts
                unzip -o "$path" -d /tmp/apkparts >/dev/null
                shopt -s nullglob
                mapfile -t apks < <(find /tmp/apkparts -maxdepth 3 -type f -name '*.apk' | sort)
                if [ "${#apks[@]}" -eq 0 ]; then
                  red "No .apk files found inside the bundle"; exit 1
                fi
                echo "[DEBUG] bundle parts:"; printf ' - %s\n' "${apks[@]}"

                # Quick ABI check: is the emulator x86/x86_64?
                if adb shell getprop ro.product.cpu.abi | grep -qi 'x86'; then
                  if ! printf '%s\n' "${apks[@]}" | grep -qiE 'x86(_64)?'; then
                    red "Bundle has no x86/x86_64 splits, but emulator is x86_64. Use an x86_64 variant or run on an arm64 emulator."
                    exit 1
                  fi
                fi

                adb install-multiple -r "${apks[@]}"
              else
                info "Installing plain APK…"
                adb install -r "$path"
              fi
            else
              info "Installing as plain APK (non-zip reported by file)…"
              adb install -r "$path"
            fi
          }

          echo "[BOOT] Reset ADB"
          adb kill-server || true
          adb start-server
          adb wait-for-device
          adb devices

          # Additional loop after wait-for-device to ensure state == 'device' (not 'offline')
          echo "[BOOT] Ensure ADB state == device (not offline)"
          for i in $(seq 1 120); do
            state="$(adb get-state 2>/dev/null || true)"
            if [[ "$state" == "device" ]]; then
              echo "[BOOT] ADB state is device"
              break
            fi
            echo "[BOOT] ADB state=$state; retry $i/120"
            sleep 2
          done

          echo "[BOOT] Wait for sys.boot_completed == 1"
          for i in $(seq 1 180); do
            boot="$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r' || true)"
            if [[ "$boot" == "1" ]]; then
              echo "[BOOT] sys.boot_completed=1"
              break
            fi
            echo "[BOOT] sys.boot_completed=$boot; retry $i/180"
            sleep 2
          done

          echo "[BOOT] Wake screen"
          adb shell input keyevent 82 || true

          # Install Twitch from repo-local file
          if [[ -n "${LOCAL_APKM:-}" ]]; then
            info "Installing package from repo: ${LOCAL_APKM}"
            install_apk_or_bundle "${LOCAL_APKM}"
          fi

          echo "[CHECK] Verify Twitch package presence"
          if ! adb shell pm list packages | grep -q "tv.twitch.android.app"; then
            red "Twitch is not installed. Ensure the .apkm is present in repo: ${LOCAL_APKM}"
            exit 1
          fi

          echo "[TEST] Run pytest (with one retry)"
          pytest -q || pytest -q
          BASH
          chmod +x /tmp/boot_and_test.sh
          ls -l /tmp/boot_and_test.sh

      # Emulator + tests (invokes the script created above)
      - name: Run tests on Android emulator
        uses: ReactiveCircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: ${{ matrix.arch }}
          target: ${{ matrix.target }}
          force-avd-creation: true
          emulator-boot-timeout: 1200
          emulator-options: >
            -no-snapshot
            -no-window
            -gpu swiftshader_indirect
            -noaudio
            -camera-back none
            -camera-front none
            -no-boot-anim
          disable-animations: true
          script: bash /tmp/boot_and_test.sh

      # Artifacts
      - name: Upload artifacts (Appium/pytest logs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: python-appium-logs-api-${{ matrix.api-level }}
          path: |
            appium.log
            .pytest_cache
            **/pytest-*.xml
            **/reports/**
