name: Run & Post
on:
  workflow_dispatch: {}

jobs:
  e2e:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    strategy:
      fail-fast: false
      matrix:
        api-level: [33]            # you can try 34 later if stable
        arch: [x86_64]
        target: [google_apis]      # avoid google_apis_playstore for speed/stability

    env:
      # Prefer storing this in repo Variables or Secrets.
      TWITCH_APK: ${{ vars.TWITCH_APK }}

    steps:
      - uses: actions/checkout@v4

      # --- Java / Gradle (keep if you also build your own app artifacts) ---
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Gradle (with cache)
        uses: gradle/actions/setup-gradle@v4

      # If you don't build your own app, you can remove this step.
      - name: (Optional) Assemble your app artifacts
        run: ./gradlew --no-daemon tasks || true

      # --- Python toolchain for tests ---
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps
        run: |
          pip install -r requirements.txt
          python -V
          pip list

      # --- Appium server (Node) ---
      - name: Setup Appium server
        run: |
          npm -g install appium@next appium-uiautomator2-driver
          appium driver install uiautomator2
          # Start Appium in background and log to file
          nohup appium --base-path / > appium.log 2>&1 &

      # --- Start emulator and run tests ---
      - name: Run tests on Android emulator
        uses: ReactiveCircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: ${{ matrix.arch }}
          target: ${{ matrix.target }}
          force-avd-creation: true
          # Increase boot timeout to avoid flakiness on cold starts
          emulator-boot-timeout: 1200
          # Headless + stable rendering; disable audio & cameras to reduce load
          emulator-options: >
            -no-snapshot
            -no-window
            -gpu swiftshader_indirect
            -noaudio
            -camera-back none
            -camera-front none
            -no-boot-anim
          disable-animations: true
          script: |
            # --- Ensure ADB sees the device ---
            adb wait-for-device
            adb devices

            # --- Extra boot wait: sys.boot_completed must be 1 ---
            #     Some images report "device" to ADB but are not fully booted yet.
            until [ "$(
              adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r'
            )" = "1" ]; do
              sleep 2
            done

            # --- Wake/unlock the screen just in case ---
            adb shell input keyevent 82

            # --- Optionally install Twitch APK if provided (after full boot) ---
            if [ -n "${TWITCH_APK}" ]; then
              echo "[INFO] Installing Twitch APK from ${TWITCH_APK}"
              if echo "${TWITCH_APK}" | grep -E "^https?://" > /dev/null; then
                curl -L "${TWITCH_APK}" -o /tmp/twitch.apk
                adb install -r /tmp/twitch.apk || { echo "[ERROR] APK install failed"; exit 1; }
              else
                adb install -r "${TWITCH_APK}" || { echo "[ERROR] APK install failed"; exit 1; }
              fi
            fi

            # --- Verify Twitch is installed (required when not providing an APK) ---
            if ! adb shell pm list packages | grep -q "tv.twitch.android.app"; then
              echo "[ERROR] Twitch is not installed on the emulator and TWITCH_APK is not provided."
              echo "        Provide TWITCH_APK env var (path or URL) or bake Twitch into the image."
              exit 1
            fi

            # --- Run Python tests (pytest + Appium) with a simple retry ---
            pytest -q || pytest -q

      # --- Collect useful logs/artifacts ---
      - name: Upload artifacts (Appium/pytest logs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: python-appium-logs-api-${{ matrix.api-level }}
          path: |
            appium.log
            .pytest_cache
            **/pytest-*.xml
            **/reports/**
